<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!--스프링 MVC관련 설정만을 분리하기 위한 파일-->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!--애너테이션 자동 인식-->
	<!-- 	<annotation-driven /> -->
	 <annotation-driven>
        <argument-resolvers>
            <beans:bean class="com.shop.util.CustomMapArgumentResovler"></beans:bean>
        </argument-resolvers>
    </annotation-driven>

	<!-- transaction 어노테이션 설정 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<!-- spring AOP는 기본적으로 다이내믹 프록시 기법을 사용해 동작하는데. 적용하려면 인터페이스가 필요하다.
			따라서 인터페이스를 가지고있지 않은 클래스(예. controller)에서 적용하려면 지원하는 클래스 프록시 모드를 사용하면 된다. -->
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!--정적 자원 : js, css, 이미지파일 등등-->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/fonts/**" location="/resources/fonts/" />
	<resources mapping="/vendor/**" location="/resources/vendor/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="contentType" value="text/html; charset=UTF-8"/>
	</beans:bean>
	<beans:bean id="naverLoginBO" class="com.shop.util.NaverLoginBO" ></beans:bean>
	
	<!-- Interceptor 설정 -->
	<!-- 로그인 -->
	<interceptors>
    	<interceptor>
        	<mapping path="/user/loginPost"/>
			<beans:bean id="loginInterceptor"  class="com.shop.intercepter.LoginInterceptor"/>
    	</interceptor>
	</interceptors>
	<!-- page 이동 -->
	<interceptors>
    	<interceptor>
<!--     		<mapping path="/blog"/>
    		<mapping path="/blogDetail"/> -->
    		<mapping path="/write"/>
    		<mapping path="/cart/shoppingCart"/>
<!--         	<mapping path="/productDetail"/>
        	<mapping path="/productList"/> -->
			<beans:bean id="authInterceptor"  class="com.shop.intercepter.AuthInterceptor"/>
    	</interceptor>
	</interceptors>
	<!-- 로그인 유지 선택시 -->
	<interceptors>
    	<interceptor>
        	<mapping path="/**/"/>
			<beans:bean id="rememberMeInterceptor"  class="com.shop.intercepter.RememberMeInterceptor"/>
    	</interceptor>
	</interceptors>
	<!-- 로그인 페이지나 회원가입페이지로 이동하려고 할 때 로그인 객체가 HttpSession에 존재할 경우 메인페이지로 이동 -->
	<interceptors>
    	<interceptor>
        	<mapping path="/user/login"/>
        	<mapping path="/user/signup"/>
			<beans:bean id="loginAfterInterceptor"  class="com.shop.intercepter.LoginAfterInterceptor"/>
    	</interceptor>
	</interceptors>
	
	<!--base-package 속성 값에 해당하는 패키지 내부의 클래스들을 모두 조사-->
	<context:component-scan base-package="com" />

</beans:beans>
